import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

# Generate the dataset
# Set random seed for reproducibility
np.random.seed(42)

# Number of data points
num_samples = 1000

# Generate random values for square footage, bedrooms, and bathrooms
area = np.random.randint(800, 3500, size=num_samples)
bedroom = np.random.randint(1, 6, size=num_samples)
bathroom = np.random.uniform(1, 4, size=num_samples)

# Generate prices based on the equation: price = 100 * area + 20000 * bedroom + 15000 * bathroom + random_noise
random_noise = np.random.normal(0, 20000, size=num_samples)  # Random noise with normal distribution
prices = 100 * area + 20000 * bedroom + 15000 * bathroom + random_noise

# Create a DataFrame to store the data
data = pd.DataFrame({
    'area': area,
    'bedroom': bedroom,
    'bathroom': bathroom,
    'price': prices
})

# Save the dataset to a CSV file
data.to_csv('house_prices_dataset.csv', index=False)

# Load the dataset
data = pd.read_csv("C:\\Users\\aquil\\OneDrive\\Documents\\Housing.csv")

# Separate features and target variable
X = data[['area', 'bedroom', 'bathroom']]
y = data['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit the Ridge regression model
model = Ridge()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Predict the price of an example house
example_house = pd.DataFrame([[1800, 3, 2]], columns=['area', 'bedroom', 'bathroom'])
predicted_price = model.predict(example_house)
print("Predicted Price:", predicted_price[0])

# Visualize actual vs. predicted prices
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs. Predicted Prices')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')  # Slope line
plt.legend(['Slope Line', 'Predictions'])
plt.show()

# Plot residuals
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True, bins=30)
plt.xlabel('Residuals')
plt.title('Distribution of Residuals')
plt.show()

# Scatter plot of each feature against the price with regression line
fig, axes = plt.subplots(1, 3, figsize=(20, 6))

sns.scatterplot(ax=axes[0], x=data['area'], y=data['price'])
sns.regplot(ax=axes[0], x=data['area'], y=data['price'], scatter=False, color='red')
axes[0].set_title('Area vs. Price')
axes[0].set_xlabel('Area')
axes[0].set_ylabel('Price')

sns.scatterplot(ax=axes[1], x=data['bedroom'], y=data['price'])
sns.regplot(ax=axes[1], x=data['bedroom'], y=data['price'], scatter=False, color='red')
axes[1].set_title('Bedrooms vs. Price')
axes[1].set_xlabel('Bedrooms')
axes[1].set_ylabel('Price')

sns.scatterplot(ax=axes[2], x=data['bathroom'], y=data['price'])
sns.regplot(ax=axes[2], x=data['bathroom'], y=data['price'], scatter=False, color='red')
axes[2].set_title('Bathrooms vs. Price')
axes[2].set_xlabel('Bathrooms')
axes[2].set_ylabel('Price')

plt.show()

--------------------------------------------------------------------------------------------------------------------------------------------------------
Mean Squared Error: 2749348210996.466
Predicted Price: 4592898.396335534



